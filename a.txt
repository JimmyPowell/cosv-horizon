1.	引言
1.1.	目的
本系统旨在构建一个集开源漏洞数据披露、精化于一体的在线平台，规范漏洞信息管理，助力我国开源事业和漏洞安全防护事业。
本文档旨在明确本系统的功能性和非功能性需求，为后续的设计和开发奠定基础。
1.2.	读者对象
本文档的使用对象，包括需求提供方和开发人员。需求方可以通过审查此文档，进行需求的进一步明确和补充；开发人员可根据此文档，进行后续的系统设计和开发。
1.3.	术语与缩写解释
缩写、术语	解  释
COSV	CCF 开源漏洞信息描述规范（CCF Open Source Vulnerability），用于标准化漏洞信息以便跨系统流转。
COSV schema	COSV 的具体实现版本（如 COSV Schema 1.0.0），用于描述开源漏洞信息。
API	API（Application Programming Interface,应用程序编程接口）是一组定义和协议，允许不同软件系统相互通信，提供功能调用、数据交换等能力。
GitHub OAuth	一种基于 OAuth 2.0 协议的身份验证和授权机制，允许第三方应用安全地访问用户的 GitHub 数据，而无需暴露用户的登录凭据。
CVE-ID	CVE-ID是Common Vulnerabilities and Exposures（通用漏洞披露）的唯一标识符，用于识别和跟踪已公开披露的计算机安全漏洞。
2.需求访谈
详见“需求调研文档” 
3.需求列表
我们根据功能性需求、非功能性需求对需求进行了分类。
	 3.1 功能性需求
需求	需求描述
登陆注册	用户可使用邮箱或GitHub OAuth进行注册或登录。
身份辨别	设置不同身份的用户：普通个人用户和组织用户、管理员。
用户认证与鉴权	设置个人账户和组织账户认证机制；此外，使用jwt作为鉴权机制，拒绝对受保护端点的未经授权的访问
用户信息的查看、修改	用户可以查看自己的用户信息、展示面板，查看他人或组织的信息和展示面板；可以编辑自己的用户名、个人或组织信息展板；可以修改密码等
组织管理	系统管理员可以审核组织的创建申请；普通用户申请加入组织后，组织的所有者或管理员可以进行审核；组织所有者可以进行人员调整和组织的删除等操作
漏洞数据提交	普通用户可以使用网页，进行单个数据的提交或上传文件进行批量提交；普通用户提交后，需要管理员进行审核。组织用户除网页端操作外，还可使用API接口进行漏洞数据的提交，无需审核。
漏洞数据管理	系统应自动判断漏洞数据是否与已有内容重复，或冲突；
如有重复，则告知用户并通知管理员；如有冲突，则需管理员选择执行覆盖或保存副本。应以清晰和简洁的方式组织数据
	3.2 非功能性需求
需求	描述
代码要遵循一定的编码规范	遵循Google的java语言代码规范
https://google.github.io/styleguide/javaguide.html
能够承载一定用户量的访问	预期可容纳用户数：不小于1000；预计可承载日访问量：不低于100人次
页面设计简洁美观；操作简单易懂	页面应保持简洁，避免过度花哨；操作逻辑应简单易懂

4.功能性需求详述
以下是系统整体的用例图，和每个功能点的用例详述：

4.1 系统用例模型
 
4.2 参与者职责



参与者	职责
普通用户	查看当前已披露的漏洞数据；网页端提交漏洞数据；加入组织等
组织用户	管理组织成员和组织数据；使用网页端或API端点提交漏洞数据等
管理员	负责系统的维护；处理组织创建请求；处理漏洞提交请求；处理漏洞信息的冲突等
4.3 重点用例详述
1)	用户注册
用例功能描述
用户在使用系统功能前，需要进行账号的注册。可以使用邮箱地址进行注册，也可使用GitHub OAuth进行注册 。
对应的事件流
内容	说明
用例名称	用户注册
用例说明	使用电邮或GitHub账号实现注册和认证
参与者	未注册的用户
前置条件	用户可以访问网站；拥有电邮地址或GitHub账号
后置条件	用户成功注册，账号信息存储在系统数据库中。
用户可以使用注册的账号登录系统。
基本路径	1.用户选择注册方式（电邮或 GitHub）。
2.用户输入电邮地址和其他必要信息，或选择 GitHub 授权。
3.系统验证电邮地址的格式，或通过 GitHub OAuth 验证。
4.验证成功后，系统创建用户账号。
5.系统发送确认邮件（如适用）。
6.用户完成注册并跳转到欢迎页面。


扩展路径	1.用户输入的电邮地址格式无效：
系统提示输入正确格式的电邮地址。
2.电邮地址已被注册：
系统提示电邮地址已存在，并建议登录或找回密码。
3.GitHub 授权失败：
系统提示授权失败，并建议重试或使用其他注册方式。


注册功能对应的流程图如下：
 


2）用户登录
用例功能描述
用户可选择使用电邮和密码，或GitHub账号授权的方式进行登陆；登陆成功后，后端签发jwt access token和refresh token，并返回给前端。
对应的事件流
内容	说明
用例名称	用户登录
用例说明	用户登录系统
参与者	普通用户/组织用户
前置条件	已完成用户注册或GitHub账号存在
后置条件	用户所输入的信息与后台系统数据库表中所保存的信息一致，或获取到GitHub OAuth授权码
后端签发 JWT access token 和 refresh token，并返回给前端。

基本路径	1.	用户选择登录方式（电邮和密码或 GitHub）。
2.	用户输入用户名和密码，或选择 GitHub 授权。
3.	系统验证用户名和密码，或通过 GitHub OAuth 验证。
4.	验证成功后，系统签发 JWT access token 和 refresh token。
5.	系统跳转到主页。
扩展路径	1.	用户输入的登录信息的用户名无效：
系统提示输入正确格式的用户名。
2.	用户输入的密码无效：
系统提示输入正确的密码信息。
3.	GitHub 授权失败：
系统提示授权失败，并建议重试或使用其他登录方式。
登录部分对应的活动图如下：
 

3）网页端提交漏洞--单个漏洞数据提交
用例功能描述
普通用户和组织用户登陆后，均可在网页端提交漏洞数据。其中，单个漏洞提交采用填写表单的形式，进行数据的收集。在点击提交后，后端进行数据的校验，筛选出重复性的漏洞并返回给用户；如果数据无重复，检查通过，那么普通用户提交的数据会被提交给系统管理员审核，审核通过后即可入库；而组织用户的提交在通过系统校验后即可自动入库。
对应的事件流
内容	说明
用例名称	网页端提交漏洞—单个漏洞提交
用例说明	登陆完成后，在网页端填写表单，提交漏洞信息
参与者	已注册用户
前置条件	登陆成功，进入漏洞提交页面
后置条件	普通用户提交的数据通过审核后入库。
组织用户提交的数据通过校验后直接入库。
基本路径	1.用户进入漏洞提交页面。
2.用户填写漏洞信息表单。
3.用户点击提交按钮。
4.后端进行数据校验。
5.如果数据无重复：
6.普通用户的提交进入审核流程。
7.组织用户的提交直接入库。
8.系统反馈提交结果给用户。

扩展路径	1.表单信息不完整或格式不正确：
系统提示用户完善信息或纠正格式。
2．发现重复漏洞数据：
系统提示用户存在重复漏洞，并提供相关信息。
3.普通用户提交审核未通过：
系统反馈审核未通过的原因，并建议修改后重新提交。


对应的流程图如下：
 
4）网页端提交漏洞—文件批量提交
用例功能描述
当用户要提交的漏洞数据较多时，可以选择以文件形式提交。普通用户提交的数据被后端解析并校验处理后，会交付管理员审核，审核通过的数据会完成入库；组织用户提交的数据会被后端解析并校验处理，如无重复或冲突等问题，则会自动入库。 
对应的事件流
内容	说明
用例名称	网页端提交漏洞—文件批量提交
用例说明	在网页端使用上传文件的方式，进行漏洞数据的批量提交
参与者	普通用户/组织用户
前置条件	用户已登陆；已准备好漏洞数据文件
后置条件	•	普通用户提交的数据通过校验和审核后入库
•	组织用户提交的数据通过校验后直接入库
基本路径	1.	用户准备好符合标准格式的文件。
2.	用户在网页端上传文件。
3.	系统接收并解析文件。
4.	后端进行数据校验，检查格式和内容。
5.	如果数据无误：
o	普通用户的提交进入审核流程。
o	组织用户的提交直接入库。
6.	系统反馈提交结果给用户。

扩展路径	1.	文件格式不正确或数据不完整：
o	系统提示用户文件格式错误或数据缺失，并要求重新提交。
2.	文件中包含重复或冲突的漏洞数据：
o	系统提示用户，并提供重复或冲突数据的详细信息。
3.	审核未通过（普通用户）：
o	系统反馈审核未通过的原因，并建议修改后重新提交。


对应的流程图如下：
 


5）API端点提交漏洞数据—文件批量提交
用例功能描述
对于组织用户，我们提供了API端点提交的方式，允许组织用户批量提交漏洞数据。我们接受的文件格式为json文件，具体示例见“”。
对应的事件流
内容	说明
用例名称	API端点提交漏洞数据—文件批量提交

用例说明	为组织用户开发，可使用API接口提交漏洞数据
参与者	组织用户
前置条件	用户已经以组织用户的身份登陆系统；用户已按照标准格式组织好了漏洞数据
后置条件	•	批量提交的漏洞数据通过校验后入库
基本路径	1.	组织用户准备好符合标准格式的 JSON 文件。
2.	用户通过API 接口上传 JSON 文件。
3.	系统接收并解析 JSON 文件。
4.	后端进行数据校验，检查格式和内容。
5.	如果数据无误，批量漏洞数据直接入库。
6.	系统反馈提交结果给用户。
扩展路径	1.	JSON 文件格式不正确或数据不完整：
系统提示用户文件格式错误或数据缺失，并要求重新提交。
2.文件中包含重复漏洞数据：
系统提示用户，并提供重复数据的详细信息。
3.API 调用失败：
系统提示网络或服务器问题，并建议稍后重试。


对应的流程图如下：

 
6）用户创建组织
用例功能描述
用户在登陆后，可以创建组织，基于组织发布漏洞信息；组织相对于个人用户来说，拥有更多功能和权限，例如通过API端点获取漏洞数据或上传数据。
对应的事件流
内容	说明
用例名称	用户创建组织
用例说明	用户可以通过创建组织，来以组织名义发布漏洞数据，和获取平台上已有的漏洞数据。
参与者	普通用户、管理员
前置条件	用户已完成注册且已登陆
后置条件	组织创建申请通过审核后，用户成为组织的所有者
基本路径	1.	用户登录后选择创建组织。
2.	用户提交组织名称、证明材料和申请原因。
3.	系统接收并记录申请信息。
4.	管理员收到创建组织的申请。
5.	管理员审核申请材料：如果审核通过，组织创建成功，用户成为组织所有者。
6.	系统通知用户审核结果。
扩展路径	1.	提交信息不完整或格式不正确：
系统提示用户完善信息并重新提交。
2.审核未通过：
系统反馈审核未通过的原因，并建议用户修改后重新申请。
3.用户取消申请：
用户可以在审核前取消申请，系统记录取消操作。


对应的流程图如下：

 
7）组织管理
用例功能描述
用户成功创建了组织后，即可进行组织的管理，包括组织基本信息的编辑；邀请其他用户加入组织；审批其他用户加入组织的申请；编辑组织已提交的漏洞数据；删除组织或转让所有权等。 
对应的事件流
内容	说明
用例名称	组织管理
用例说明	组织所有者对组织的管理，包括信息修改、成员调整等
参与者	组织所有者
前置条件		用户已完成组织的创建，成为了组织的所有者
后置条件	组织信息成员状态或漏洞数据完成更新

基本路径	1.	组织所有者登录并访问组织管理页面。
2.	组织所有者编辑组织的基本信息。
3.	组织所有者邀请其他用户加入组织。
4.	组织所有者审批其他用户的加入申请。
5.	组织所有者编辑组织已提交的漏洞数据。
6.	组织所有者删除组织或转让所有权。
7.	系统保存并更新所有更改。
扩展路径	1.	编辑信息失败：
2.	系统提示错误原因，所有者重新提交。
3.	邀请用户加入失败：系统提示邀请失败原因（如用户不存在）。
4.	审批申请失败：系统提示失败原因，所有者重新处理。
5.	转让所有权：新所有者接受转让，系统更新所有者信息。
6.	删除组织：系统确认删除操作，所有数据被清除。
三部分对应的流程图如下：


 


 


 
8）漏洞数据提交榜单
用例功能描述
根据用户提交的漏洞数，建立一个实时更新的榜单，从而激励用户提交漏洞数据
对应的事件流
内容	说明
用例名称	漏洞数据提交榜单
用例说明	依据用户提交的漏洞数据，设计一个显示排名信息的榜单
参与者	普通用户/组织用户
前置条件	用户已登陆且已成功提交漏洞数据
后置条件	1.	用户的排名信息已更新
2.	榜单实时反映最新的提交情况
基本路径	1.	用户登录到系统。
2.	用户提交漏洞数据。
3.	系统验证并记录提交的数据。
4.	系统更新用户的提交数量。
5.	榜单实时更新，显示最新的排名。
扩展路径	1.	提交失败：如果用户提交的数据不符合要求，系统提示用户进行修改。
2.	榜单查看：用户可以按时间段（如日、周、月）查看不同的排名。
3.	奖励机制：系统可以为排名靠前的用户提供奖励或徽章。
对应的流程图如下：
 

5.非功能性需求详述

5.1 代码规范

本系统的技术栈为：
前端Vue3 、typescript、Tailwind CSS和element UI；
后端：Spring Boot、Mybatis、Mysql、Docker。

其中，前端代码规范参考：https://coderlmn.github.io/code-standards/
后端代码规范参考：https://google.github.io/styleguide/javaguide.html

5.2	可用性
预计可容纳用户数：不低于1000、可支持不低于100人同时访问，核心业务响应速度不超过1.5秒

